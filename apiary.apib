FORMAT: 1A
HOST: https://flame-dev.1n1.hk

# Fenix

這是好孕來後端API的規格文件。

## Hash定義

+ `bbt_id`溫度計ID

    toUpper(sha1(toUpper(`XX:XX:XX:XX:XX:XX_1N1_BBT`))) -> `56CDB9A741552F7EECB3FC215814A8B617B99E5D`

+ `phone_id` 手機ID

    toUpper(sha1(toUpper(`XX:XX:XX:XX:XX:XX_1N1_PHONE`))) -> `3879F289A08E2B62E4AF452183C600F0B91A1CAC`

+ `product_code` QR碼

    toUpper(sha1(toUpper(`HAOYUNLAI_1`))) -> `5F57F95690CA722BB5278DA4FF31536572C73A0B`
        
## 驗證簽名


    簽名由三組材料加上Secret以HmacSHA1加密構成。
    
+   Method：`GET`、`POST`、`PUT`、`DELETE`，皆大寫。
+   Uri：網址不含Domain部分，但含有Query，例如：`https://flame.1n1.hk/v1/members/login?type=basic` -> `/v1/members/login?type=basic`
+   Nonce：亂數，目前是使用時間戳記(Long)
+   Digest：簽名算法是Base64(HMAC(Secret,URLEncoding(`Method`+`Uri`+`Nonce`)))
    
    最終在送出的Reqest中塞入`Authorization`:`member_id`:`Nonce`:`Digest`，如果算錯會得到Http status 401。


# Group Service

## Service Status [/v1/status]

取得後端狀態，包含目前的模式(release,debug)和版本。

**未來可能移至`/status`**。

### Get Service Status [GET]

+ Response 200 (application/json)

    + Body
    
            {
              "status": "ok",
              "result": {
                "version": "v1",
                "mode": "release"
              }
            }


# Group Product Code

## Product Status [/v1/products/{product_code}]

檢查啟動碼是否啟用過。

+ Parameters
    + product_code:debug-code (string,required) 

### Get Product Code Status [GET]

+ Response 200 (application/json)

    + Body 
    
            {
              "status": "ok",
              "result": {
                "type": "full",
                "code": "debug-code",
                "issued_at": "2015-08-10T08:45:00Z",
                "activated_at": "2015-08-11T07:29:59Z",
                "activated_by": "5FE1EEA69376B035F998F6CA001CA74A4D3404B0"
              }
            }


## Create Product Code [/v1/products]

產生QR碼，code長度為40byte，type有四種

+ `full`可以移機的版本。
+ `limited`不可移機的版本。
+ `upgrade`升級版本，將不可移機版本提升至可移機。
+ `replace`提供更換BBT的QR碼。


**本功能只適用於debug模式**

### Post Product Code [POST]

+ Request 

    + Body 
        
            {"code":"debug-code3","type":"full"}
            
            
+ Response 200 (application/json)

    + Body 
    
            {
                 "status": "ok"
            }
            
## Reset Product Code [/v1/products/{product_code}/reset]

重置QR碼，同時刪除啟用該QR碼的使用者(限`limited`、`full`兩類)。


**本功能只適用於debug模式**

+ Parameters
    + product_code:debug-code (string,required) 


### Reset Code [GET]

+ Response 200 (application/json)
    
    + Body
    
            {
              "status": "ok"
            }


# Group Member

## Register [/v1/members]

註冊會員資料，目前只支援一般(`basic`)帳戶註冊，請填入下列資料：

+   bbt_id：溫度計Hash Code，長40byte
+   type:目前只支援`basic`，即用email/passowrd帳戶註冊， **type是`basic`時，必須帶`email`、`passwrod`兩個欄位**。 
+   email：必須符合Email的正規表達式， **特別注意帳戶是區分大小寫的**，登入時也必須要輸入正確的資料。
+   password：密碼，請自行Hash過後上傳，後端僅驗證兩者是否相同。
+   phone_id：手機藍芽位址Hash Code，不可重複。
+   product_code：QR碼，必須有效且是特定的類型(即`full`、`limited`擇一)。

回傳包含兩塊資料，分別是使用者資料(User)和BBT資料(Setting)。

+   member_id：代表使用者的UniqueID，修改或讀取使用者資料都需要。
+   secret：必須記錄在本地端，用來產生讀寫資料的驗證簽名的材料。
+   is_allow_migrate：使用者是否具有移機的權力(即是否可修改phone_id)。

其餘欄位在後面的部分解釋。

### Register [POST]


+ Request Register (application/json)

    + Body 
        
            {
                "bbt_id":"bbt_id",
                "email":"email",
                "password":"password",
                "phone_id":"phone_id",
                "product_code":"debug-code",
                "type":"basic"
            }

    

+ Response 200 (application/json)

    + Body 
    
            {
              "status": "ok",
              "result": {
                "user": {
                  "member_id": "5FE1EEA69376B035F998F6CA001CA74A4D3404B0",
                  "secret": "3CCF24FF8990E0B098B3B1A32E586D40A8EB550B",
                  "phone_id": "phone_id",
                  "product_code": "debug-code",
                  "bbt_id": "bbt_id",
                  "is_allow_migrate": true,
                  "first_name": null,
                  "last_name": null,
                  "birthday": null,
                  "registered_at": "2015-08-11T07:29:59Z",
                  "modified_at": "2015-08-11T07:29:59Z",
                  "synced_at": "2015-08-11T07:29:59Z"
                },
                "setting": {
                  "member_id": "5FE1EEA69376B035F998F6CA001CA74A4D3404B0",
                  "is_backlight": true,
                  "alarm_sound_vol": 0,
                  "alarm_at": "15:29:59",
                  "sync_sound_vol": 1,
                  "modified_at": "2015-08-11T07:29:59Z"
                }
            }


## Login [/v1/members/login{?type}]
    
登錄會員，回傳資料如同註冊會員，目前只支援一般(`basic`)帳戶登入。

+ Parameters
    + type:basic (string,required) 
    
### Login [POST]


+ Request Login (application/json)
    
    + Body
    
            {"email":"email","password":"password"}


+ Response 200 (application/json)
    
    + Body 
    
            {
              "status": "ok",
              "result": {
                "user": {
                  "member_id": "5FE1EEA69376B035F998F6CA001CA74A4D3404B0",
                  "secret": "3CCF24FF8990E0B098B3B1A32E586D40A8EB550B",
                  "phone_id": "phone_id",
                  "product_code": "debug-code",
                  "bbt_id": "bbt_id",
                  "is_allow_migrate": true,
                  "first_name": null,
                  "last_name": null,
                  "birthday": null,
                  "registered_at": "2015-08-11T07:29:59Z",
                  "modified_at": "2015-08-11T07:29:59Z",
                  "synced_at": "2015-08-11T07:29:59Z"
                },
                "setting": {
                  "member_id": "5FE1EEA69376B035F998F6CA001CA74A4D3404B0",
                  "is_backlight": true,
                  "alarm_sound_vol": 0,
                  "alarm_at": "15:29:59",
                  "sync_sound_vol": 1,
                  "modified_at": "2015-08-11T07:29:59Z"
                }
              }
            }

# Group Restrict

## Member Data [/v1/members/{member_id}]

取得或修改會員資料，可修改的欄位包含姓名及生日，`password`、`bbt_id`、`is_allow_migrate`或`phone_id`修改必須使用特殊的API。


+ Parameters
    + member_id:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (string,required) 



### Get User Data [GET]

取得會員資料

+ last_name: 使用者的姓
+ firtst_name: 使用者的名
+ birtyday: 使用者生日，格式:`1988-12-15`


+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest
    

+ Response 200 (application/json)

    + Body 
    
            {
              "status": "ok",
              "result": {
                "member_id": "2B4B4DC24C1AFF38969ED40BB437152C7F4AA286",
                "secret": "732C396277CFDC25214E1117C1C1AFEB79394EB7",
                "phone_id": "83794F25A6BE589B7BD6095EBEAB84382E74882D",
                "product_code": "1111111111111111111111111111111111111111",
                "bbt_id": "2A4873F1D777525670FD406E9839FC3BD01DDCE0",
                "is_allow_migrate": true,
                "first_name": null,
                "last_name": null,
                "birthday": null,
                "registered_at": "2015-08-07T01:59:05Z",
                "modified_at": "2015-08-07T01:59:05Z",
                "synced_at": "2015-08-07T02:38:43Z"
              }
            }
            

### Set User Data [PUT]

修改會員資料，回傳最後修改的時間`modified_at`。

+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest

    + Body 
    
            {  
               "birthday":"1988-12-15",
               "first_name":"First",
               "last_name":"Last"
            }



+ Response 200 (application/json)

    + Body 
    
            {
              "status": "ok",
              "result": "2015-09-03T07:43:22Z"
            }

## Modified Password [/v1/members/{member_id}/password{?type}]

修改使用者密碼(限`basic`帳戶，即使用email/passsword登入者)，Server端不驗證舊的密碼，Client端自行確認後進行Hash。


+ Parameters
    + member_id:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (string,required) 
    + type:basic (string,required)


### Change Password [PUT]

+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest

    + Body
            
            {
                "password":"1234567"
            }
    
+ Response 200 (application/json)

    + Body
    
            {
              "status": "ok"
            }
    

## BBT Setting [/v1/members/{member_id}/setting]

取得或修改溫度計設定。


+ Parameters
    + member_id:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (string,required) 



### Get BBT Setting [GET]

取得溫度計設定，註冊時也會傳回一組預設值。

+ is_backlight:true，是否開啟背光
+ alarm_sound_vol:0，鬧鐘音量(0:off、1:small、2:medium、3:Loud)
+ alarm_at:09:59:00，鬧鐘時間(有效至分)
+ sync_sound_vol:1，同步音音量(0:off、1:small、2:medium、3:Loud)
+ modified_at:`2015-08-07T01:59:05Z`，上次修改設定時間


+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest
    

+ Response 200 (application/json)

    + Body 
    
            {  
               "status":"ok",
               "result":{  
                  "member_id":"2B4B4DC24C1AFF38969ED40BB437152C7F4AA286",
                  "is_backlight":true,
                  "alarm_sound_vol":0,
                  "alarm_at":"09:59:00",
                  "sync_sound_vol":1,
                  "modified_at":"2015-08-07T01:59:05Z"
               }
            }
            

### Set BBT Setting [PUT]

修改溫度計設定，注意Client端必須自行保證溫度計設定與資料相同，回傳溫度計的上次修改時間`modified_at`。

+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest

    + Body 
    
            {  
               "alarm_at":"09:59:00",
               "modified_at":"2015-08-07T01:59:05Z",
               "member_id":"2B4B4DC24C1AFF38969ED40BB437152C7F4AA286",
               "is_backlight":false,
               "alarm_sound_vol":0,
               "sync_sound_vol":0
            }



+ Response 200 (application/json)

    + Body 
    
            {
              "status": "ok",
              "result": "2015-09-03T07:43:22Z"
            }
            
## Replace BBT [/v1/members/{member_id}/setting/replace]

更換BBT，需要一組`replace`的序號，且序號是有效的，使用後並不會改變使用者註冊時當時的序號，而僅是改變使用者的`bbt_id`並將`replace`的序號標示為已使用。

### Replace BBT Id [POST]

+ Request (application/json)

    + Body 
        
            {  
               "bbt_id":"bbt_id_replace",
               "product_code":"replace-code"
            }

+ Response 200 (application/json)

    + Body 
    
            {
              "status": "ok"
            }
            

## Menses Periods [/v1/members/{member_id}/periods]

編輯經期資料，資料筆數必須是成對的，每一組日期是由兩組資料構成，開頭的`is_type_started`為`true`，結尾則是`false`。

+ Parameters
    + member_id:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (string,required) 
    
### Update Menses Period [PUT]

上傳目前的經期資料， **每次上傳成功後會把舊的資料清除**，意思是每次都必須上傳全部的經期資料，因為前次的資料不會保留。

+ date_at：日期，使用者的經期資料是參照日期的，因此不會有重複的日期。
+ is_type_started：是否是起始日，`true`代表是經期開始，反之則是結束。
+ is_human_input：是否由使用者輸入的資料，或是由APP預測。
+ is_init：Deprecated。

伺服器收到後會回傳上傳的資料筆數( **String，未來會換回`Synced_at`**)。

+ Request (application/json)
    + Header
        
            Authorization:member_id:nonce:digest

    + Body
            
            [  
               {  
                  "date_at":"2015-07-01",
                  "is_type_started":true,
                  "is_init":false,
                  "is_human_input":false
               },
               {  
                  "date_at":"2015-07-03",
                  "is_type_started":false,
                  "is_init":false,
                  "is_human_input":false
               }
            ]
            
+ Response 200 (application/json)

    + Body
    
            {  
                "status":"ok",
                "result":"2"
            }   


### Retrivel Menses Period [GET]

取得使用者的經期資料，回傳一個包含所有資料的List。


+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest
            
+ Response 200 (application/json)

    + Body
    
            {  
               "status":"ok",
               "result":[  
                  {  
                     "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                     "date_at":"2015-07-01",
                     "is_type_started":true,
                     "is_human_input":false,
                     "is_init":false
                  },
                  {  
                     "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                     "date_at":"2015-07-03",
                     "is_type_started":false,
                     "is_human_input":false,
                     "is_init":false
                  }
               ]
            }

## Temperature Records [/v1/members/{member_id}/records]


修改使用者體溫資料，每一組資料的`measured_date`都是唯一的，由Client端確保`created_at`和`modified_at`，資料包含以下欄位：


+ measured_date:`2015-07-03`，資料的所屬日期
+ member_id:770DA6030E0F0E44B8B3D0BE219564081EB4BAA3，使用者Unique ID
+ is_sex:false，是否行房
+ is_medicine:false，是否吃藥
+ is_from_bbt:false，是否由BBT量測
+ is_fever:false，是否發燒
+ is_alcohol:false，是否喝酒
+ degress:0，溫度( **整數，請自行轉換**)
+ note:備註記錄
+ measured_at:`2015-07-03T00:00:00Z`，量測時間(由BBT取得)
+ modified_at:`2015-07-03T00:00:00Z`，最後修改的時間
+ created_at:`2015-07-03T00:00:00Z`，資料建立時間，通常是由使用者手動輸入或BBT同步的時間。


+ Parameters
    + member_id:AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA (string,required) 
    

### Update Records [PUT]

上傳使用者體溫資料，資料形式為Map，以日期`YYYY-MM-DD`為Key，資料本身為Value，上傳成功後回傳最後同步時間`synced_at`。

**value = `null` 代表刪除該日資料**。


+ Request (application/json)

    + Body
    
            {  
               "2015-07-03":{  
                  "created_at":"2015-07-03T00:00:00Z",
                  "note":null,
                  "modified_at":"2015-07-03T00:00:00Z",
                  "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                  "measured_date":"2015-07-03",
                  "measured_at":"2015-07-03T00:00:00Z",
                  "is_sex":false,
                  "is_medicine":false,
                  "is_from_bbt":false,
                  "is_fever":false,
                  "is_alcohol":false,
                  "degress":0
               },
               "2015-07-10":null,
               "2015-07-08":{  
                  "created_at":"2015-07-08T00:00:00Z",
                  "note":null,
                  "modified_at":"2015-07-08T00:00:00Z",
                  "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                  "measured_date":"2015-07-08",
                  "measured_at":"2015-07-08T00:00:00Z",
                  "is_sex":false,
                  "is_medicine":false,
                  "is_from_bbt":false,
                  "is_fever":false,
                  "is_alcohol":false,
                  "degress":0
               },
               "2015-07-01":{  
                  "created_at":"2015-07-01T00:00:00Z",
                  "note":null,
                  "modified_at":"2015-07-01T00:00:00Z",
                  "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                  "measured_date":"2015-07-01",
                  "measured_at":"2015-07-01T00:00:00Z",
                  "is_sex":false,
                  "is_medicine":false,
                  "is_from_bbt":false,
                  "is_fever":false,
                  "is_alcohol":false,
                  "degress":0
               }
            }
            
            
+ Response 200 (application/json)
    
    + Body
    
            {
              "status": "ok",
              "result": "2015-09-04T07:39:22Z"
            }

### Retrival Records [GET]

取得使用者體溫紀錄資料，形式為Array，如果資料庫無資料會取得一個空陣列`[]`。

+ Request (application/json)

    + Header
        
            Authorization:member_id:nonce:digest
            
            
+ Response 200 (application/json)

    + Body 
    
            {  
               "status":"ok",
               "result":[  
                  {  
                     "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                     "measured_date":"2015-07-08",
                     "created_at":"2015-07-08T00:00:00Z",
                     "modified_at":"2015-07-08T00:00:00Z",
                     "degrees":null,
                     "measured_at":"2015-07-08T00:00:00Z",
                     "is_medicine":false,
                     "is_alcohol":false,
                     "is_fever":false,
                     "is_sex":false,
                     "is_from_bbt":false,
                     "note":null
                  },
                  {  
                     "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                     "measured_date":"2015-07-01",
                     "created_at":"2015-07-01T00:00:00Z",
                     "modified_at":"2015-07-01T00:00:00Z",
                     "degrees":null,
                     "measured_at":"2015-07-01T00:00:00Z",
                     "is_medicine":false,
                     "is_alcohol":false,
                     "is_fever":false,
                     "is_sex":false,
                     "is_from_bbt":false,
                     "note":null
                  },
                  {  
                     "member_id":"770DA6030E0F0E44B8B3D0BE219564081EB4BAA3",
                     "measured_date":"2015-07-03",
                     "created_at":"2015-07-03T00:00:00Z",
                     "modified_at":"2015-07-03T00:00:00Z",
                     "degrees":null,
                     "measured_at":"2015-07-03T00:00:00Z",
                     "is_medicine":false,
                     "is_alcohol":false,
                     "is_fever":false,
                     "is_sex":false,
                     "is_from_bbt":false,
                     "note":null
                  }
               ]
            }


# Group Misc

## Report [/v1/report]

傳遞資訊(除錯用)，`email`表是使用者的帳戶、`type`表示Log記錄的類別(可自訂)；`log`的部分則是將`plain_text`通過演算法產生：
`log`=base64(gzip(`plain_text`))。

### Upload Log [POST]

+ Request (applicaton/json)

    + Body 
    
            {  
                "email":"test@test.com",
                "log":"H4sIAAAAAAAAAO2YUW+bMBDHn9tPcY+JRKIzwY3hbWNsqlQlVVppmqIoAmMraC1MQNpNS7/77EJG\nthJNSSGRujzYh8H+/87ns0GM79Mkfn/lXaeJjO4EOPAzFX74A/IEeBLHXOQQioeIi6nqld37aT5H\nRKqKiR4ydKnLbDRn0HE9B5mDrkNdh9kOmt2n8/EL+TDKePIgUkj0I8hEqsWh3+/XdOaLaTBAOoPV\naHx7+fHLauK9+7D6PLm89Yp6PhrPJ97N9Xh0461qBM5CkfE0+pYnaQZT1F4rZ3v6okd0xXSFah5U\n2sHAksGs3o0woIFyYwe0GiQwYDsPQl+QnQcR3GOQZRPzr9C2GUIrxOCAOEpMdkjcBcoD4hijG7Nr\njbR9t0KYxOJ8upzB1ScPRuL7MgMKHRMJ7SHrmQyI6RB0TNpXkG6NdiZyd+GnPs9FGmV5xEdJHsmI\n+3mkUNMknoFM0ipRoww62ZJzkWWvlHtOxMbkikRrTu45kRqTK87Pf8g9plEu3EXVXy9w8hU6aBqA\n+LpSBzzrPHahZDUCqWXEFYO1NJGDR64WKP3orj3kPhtVeyTCN730b+/82r5ozabASe2kdlI7strv\nQ6QJtWbPkOoTqAm16gtou9oR3qonpBpiqsKJAQNpwJAaEDBVLAPkhQG+comoe9xW95QNVT+png9U\nmwwNEOF+72Up902N4ifAxgzYyyCQtWX13um/K4VasZ/XanuQSUlVlpax1O1h++Tjzfl/jPYG2dLt\nMg5Wq2RSEnlpbSzJsrCEK6uLr3akajNSrYrgh/TMX3tG/oyVtlJ7u3G0Mav11ZJbDsjhjuRf40PY\n+ZoVAAA\u003d\n",
                "type":"ble"
            }
            
+ Response 200 (application/json)

    + Body
    
            {
              "status": "ok",
              "result": {
                "version": "v1",
                "mode": "release"
              }
            }
